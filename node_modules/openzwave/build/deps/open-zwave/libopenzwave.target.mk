# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := libopenzwave
DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I/home/pi/.node-gyp/0.10.36/src \
	-I/home/pi/.node-gyp/0.10.36/deps/uv/include \
	-I/home/pi/.node-gyp/0.10.36/deps/v8/include \
	-I$(srcdir)/deps/open-zwave/cpp/hidapi/hidapi \
	-I$(srcdir)/deps/open-zwave/cpp/src \
	-I$(srcdir)/deps/open-zwave/cpp/src/command_classes \
	-I$(srcdir)/deps/open-zwave/cpp/src/platform \
	-I$(srcdir)/deps/open-zwave/cpp/src/platform/unix \
	-I$(srcdir)/deps/open-zwave/cpp/src/value_classes \
	-I$(srcdir)/deps/open-zwave/cpp/tinyxml

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp \
	-fno-omit-frame-pointer \
	-Wno-ignored-qualifiers \
	-Wno-tautological-undefined-compare \
	-Wno-unknown-pragmas

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I/home/pi/.node-gyp/0.10.36/src \
	-I/home/pi/.node-gyp/0.10.36/deps/uv/include \
	-I/home/pi/.node-gyp/0.10.36/deps/v8/include \
	-I$(srcdir)/deps/open-zwave/cpp/hidapi/hidapi \
	-I$(srcdir)/deps/open-zwave/cpp/src \
	-I$(srcdir)/deps/open-zwave/cpp/src/command_classes \
	-I$(srcdir)/deps/open-zwave/cpp/src/platform \
	-I$(srcdir)/deps/open-zwave/cpp/src/platform/unix \
	-I$(srcdir)/deps/open-zwave/cpp/src/value_classes \
	-I$(srcdir)/deps/open-zwave/cpp/tinyxml

OBJS := \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/tinyxml/tinystr.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/tinyxml/tinyxml.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/tinyxml/tinyxmlerror.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/tinyxml/tinyxmlparser.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/aes/aes_modes.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/aes/aescrypt.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/aes/aeskey.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/aes/aestab.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Alarm.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ApplicationStatus.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Association.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/AssociationCommandConfiguration.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Basic.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/BasicWindowCovering.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Battery.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/CRC16Encap.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ClimateControlSchedule.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Clock.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/CommandClass.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/CommandClasses.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Configuration.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ControllerReplication.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/DoorLock.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/DoorLockLogging.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/EnergyProduction.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Hail.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Indicator.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Language.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Lock.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ManufacturerSpecific.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Meter.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/MeterPulse.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/MultiCmd.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/MultiInstance.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/MultiInstanceAssociation.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/NoOperation.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/NodeNaming.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Powerlevel.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Proprietary.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Protection.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SceneActivation.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Security.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SensorAlarm.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SensorBinary.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SensorMultilevel.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SwitchAll.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SwitchBinary.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SwitchMultilevel.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SwitchToggleBinary.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/SwitchToggleMultilevel.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ThermostatFanMode.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ThermostatFanState.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ThermostatMode.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ThermostatOperatingState.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/ThermostatSetpoint.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/TimeParameters.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/UserCode.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/Version.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/command_classes/WakeUp.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/Value.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueBool.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueButton.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueByte.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueDecimal.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueInt.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueList.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueRaw.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueSchedule.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueShort.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueStore.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/value_classes/ValueString.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Controller.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Event.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/FileOps.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/HidController.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Log.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Mutex.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/SerialController.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Stream.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Thread.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/TimeStamp.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/Wait.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/EventImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/FileOpsImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/LogImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/MutexImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/SerialControllerImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/ThreadImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/TimeStampImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/platform/unix/WaitImpl.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Driver.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Group.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Manager.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Msg.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Node.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Options.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Scene.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/Utils.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/src/vers.o \
	$(obj).target/$(TARGET)/deps/open-zwave/cpp/hidapi/linux/hid.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic

LDFLAGS_Release := \
	-pthread \
	-rdynamic

LIBS :=

$(obj).target/deps/open-zwave/libopenzwave.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/deps/open-zwave/libopenzwave.a: LIBS := $(LIBS)
$(obj).target/deps/open-zwave/libopenzwave.a: TOOLSET := $(TOOLSET)
$(obj).target/deps/open-zwave/libopenzwave.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/deps/open-zwave/libopenzwave.a
# Add target alias
.PHONY: libopenzwave
libopenzwave: $(obj).target/deps/open-zwave/libopenzwave.a

# Add target alias to "all" target.
.PHONY: all
all: libopenzwave

# Add target alias
.PHONY: libopenzwave
libopenzwave: $(builddir)/libopenzwave.a

# Copy this to the static library output path.
$(builddir)/libopenzwave.a: TOOLSET := $(TOOLSET)
$(builddir)/libopenzwave.a: $(obj).target/deps/open-zwave/libopenzwave.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/libopenzwave.a
# Short alias for building this static library.
.PHONY: libopenzwave.a
libopenzwave.a: $(obj).target/deps/open-zwave/libopenzwave.a $(builddir)/libopenzwave.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/libopenzwave.a

